// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: bifrost.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BifrostService_Join_FullMethodName           = "/proto.BifrostService/Join"
	BifrostService_SendPreprepare_FullMethodName = "/proto.BifrostService/SendPreprepare"
	BifrostService_Send_FullMethodName           = "/proto.BifrostService/Send"
	BifrostService_Fetch_FullMethodName          = "/proto.BifrostService/Fetch"
)

// BifrostServiceClient is the client API for BifrostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BifrostServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	SendPreprepare(ctx context.Context, in *SendPreprepareRequest, opts ...grpc.CallOption) (*SendPreprepareResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchResponse], error)
}

type bifrostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBifrostServiceClient(cc grpc.ClientConnInterface) BifrostServiceClient {
	return &bifrostServiceClient{cc}
}

func (c *bifrostServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, BifrostService_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostServiceClient) SendPreprepare(ctx context.Context, in *SendPreprepareRequest, opts ...grpc.CallOption) (*SendPreprepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPreprepareResponse)
	err := c.cc.Invoke(ctx, BifrostService_SendPreprepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, BifrostService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BifrostService_ServiceDesc.Streams[0], BifrostService_Fetch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchRequest, FetchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BifrostService_FetchClient = grpc.ServerStreamingClient[FetchResponse]

// BifrostServiceServer is the server API for BifrostService service.
// All implementations must embed UnimplementedBifrostServiceServer
// for forward compatibility.
type BifrostServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	SendPreprepare(context.Context, *SendPreprepareRequest) (*SendPreprepareResponse, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Fetch(*FetchRequest, grpc.ServerStreamingServer[FetchResponse]) error
	mustEmbedUnimplementedBifrostServiceServer()
}

// UnimplementedBifrostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBifrostServiceServer struct{}

func (UnimplementedBifrostServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedBifrostServiceServer) SendPreprepare(context.Context, *SendPreprepareRequest) (*SendPreprepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPreprepare not implemented")
}
func (UnimplementedBifrostServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedBifrostServiceServer) Fetch(*FetchRequest, grpc.ServerStreamingServer[FetchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedBifrostServiceServer) mustEmbedUnimplementedBifrostServiceServer() {}
func (UnimplementedBifrostServiceServer) testEmbeddedByValue()                        {}

// UnsafeBifrostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BifrostServiceServer will
// result in compilation errors.
type UnsafeBifrostServiceServer interface {
	mustEmbedUnimplementedBifrostServiceServer()
}

func RegisterBifrostServiceServer(s grpc.ServiceRegistrar, srv BifrostServiceServer) {
	// If the following call pancis, it indicates UnimplementedBifrostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BifrostService_ServiceDesc, srv)
}

func _BifrostService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifrostService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifrostService_SendPreprepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPreprepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServiceServer).SendPreprepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifrostService_SendPreprepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServiceServer).SendPreprepare(ctx, req.(*SendPreprepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifrostService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifrostService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifrostService_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BifrostServiceServer).Fetch(m, &grpc.GenericServerStream[FetchRequest, FetchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BifrostService_FetchServer = grpc.ServerStreamingServer[FetchResponse]

// BifrostService_ServiceDesc is the grpc.ServiceDesc for BifrostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BifrostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BifrostService",
	HandlerType: (*BifrostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _BifrostService_Join_Handler,
		},
		{
			MethodName: "SendPreprepare",
			Handler:    _BifrostService_SendPreprepare_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _BifrostService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _BifrostService_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bifrost.proto",
}
